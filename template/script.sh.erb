#!/usr/bin/env bash

<%-
  session_dir = session.staged_root
%>

set -ex

# Load the required environment
CACHE_PATH="/opt/cache/pyxis"
IMAGE="rocker/rstudio:4.1"
IMAGE_DIR="$CACHE_PATH/$(dirname "$IMAGE")"
IMAGE_FULLPATH="$CACHE_PATH/$IMAGE"

# Download image
mkdir -p $IMAGE_DIR
if [ ! -f "$IMAGE_FULLPATH" ]; then
	srun --ntasks=1 --mem=0 \
		--container-image="$IMAGE" \
		--container-save="$IMAGE_FULLPATH" \
		true
fi

tries=1; while [ "$tries" -lt 10 ]; do
	if file "$IMAGE_FULLPATH" | grep -q "Squashfs filesystem"; then
		break
	fi
	echo "Image is not complete. Wait a few seconds... ($tries/10)"
	sleep 10
	tries=$((tries+1))
done
if [ "$tries" -ge 10 ]; then
	echo "Image import failure. Please try an another experiment."
	exit 1
fi

. $LMOD_PKG/init/sh

# PAM auth helper used by RStudio
export WORKING_DIR="<%= session_dir %>"
export RSESSION_WRAPPER_FILE="$WORKING_DIR/rsession.sh"
(
umask 077
sed 's/^ \{2\}//' > "$WORKING_DIR/rsession.sh" << EOL
  #!/usr/bin/env bash

  # Log all output from this script
  export RSESSION_LOG_FILE="$WORKING_DIR/rsession.log"

  exec &>>"\${RSESSION_LOG_FILE}"

  # rsession.sh doesn't share the same env as the outside script, so these
  # need to be set explicitly
  export R_LIBS_SITE="${R_LIBS_SITE}"
  export MODULEPATH_ROOT="$MODULEPATH_ROOT"
  export MODULEPATH="$MODULEPATH"
  export LMOD_PKG="$LMOD_PKG"

  # Launch the original command
  echo "Launching rsession..."
  set -x
  exec rsession --r-libs-user "${R_LIBS_USER}" "\${@}"
EOL
)
chmod 755 "$WORKING_DIR/rsession.sh"

# Set working directory to home directory
cd "${HOME}"

# Launch the RStudio Server
echo "Starting up rserver..."

srun --container-workdir=${HOME} \
 --container-image="$IMAGE_FULLPATH" \
 --no-container-remap-root \
 --container-mount-home \
 --container-writable \
 --preserve-env \
 --export=ALL,PASSWORD=${RSTUDIO_PASSWORD} \
 --container-mounts="/opt/gentoo:/opt/gentoo:ro,/opt/cvmfs:/opt/cvmfs:ro,/etc/slurm/taskprolog:/etc/slurm/taskprolog:ro" \
 sh -c "
 . $LMOD_PKG/init/sh \
 && ml gentoo \
 && ml R \
 && rserver --www-port ${port} \
  --server-daemonize=0 \
  --auth-none 0 \
  --auth-encrypt-password 0 \
  --www-enable-origin-check 0 \
  --rsession-path ${RSESSION_WRAPPER_FILE} \
  --rsession-which-r=\$(which R) \
  --auth-pam-helper-path /usr/lib/rstudio-server/bin/pam-helper \
  --server-user \$USER
  "

echo 'Server exited...'
